#include "rapidxml-1.13/rapidxml.hpp"
#include "rapidxml-1.13/rapidxml_utils.hpp"
#include <iostream>
#include <vector>
#include <string>

using namespace std;

void ReadFromXML(std::vector<std::string>& cells1, std::vector<std::string>& cells2, string &key, int &length, string& start, string& pattern1, string& pattern2)
{
    // Load the XML file into a string
    rapidxml::file<> xmlFile("bio.xml");
    rapidxml::xml_document<> doc;
    doc.parse<0>(xmlFile.data());

    // Find the <dna> node and retrieve its attributes
    rapidxml::xml_node<>* dna_node = doc.first_node("dna");
    if (dna_node) {
        // Retrieve dna attributes
        key = dna_node->first_attribute("key")->value();
        length = std::stoi(dna_node->first_attribute("length")->value());
        start = dna_node->first_attribute("start")->value();

        // Find the first <probe> element and its <cell> elements
        rapidxml::xml_node<>* probe_node = dna_node->first_node("probe");
        if (probe_node) {
            // Retrieve the pattern of the first probe
            pattern1 = probe_node->first_attribute("pattern")->value();

            // Extract cell values from the first probe
            for (rapidxml::xml_node<>* cell_node = probe_node->first_node("cell"); cell_node; cell_node = cell_node->next_sibling("cell")) {
                cells1.push_back(cell_node->value());
            }

            // Move to the next <probe> node
            probe_node = probe_node->next_sibling("probe");
            if (probe_node) {
                // Retrieve the pattern of the second probe
                pattern2 = probe_node->first_attribute("pattern")->value();

                // Extract cell values from the second probe
                for (rapidxml::xml_node<>* cell_node = probe_node->first_node("cell"); cell_node; cell_node = cell_node->next_sibling("cell")) {
                    cells2.push_back(cell_node->value());
                }
            }
        }
    }
    else {
        std::cerr << "No <dna> root node found!" << std::endl;
    }
}

void DisplayXMLData(std::vector<std::string>& cells1, std::vector<std::string>& cells2, string& key, int& length, string& start, string& pattern1, string& pattern2)
{
    cout << "Key: " << key << endl;
    cout << "Length: " << length << endl;
    cout << "Start: " << start << endl;
    cout << "Pattern1: " << pattern1 << endl;
    cout << "Pattern2: " << pattern2 << endl;

    cout << endl;
    cout << endl;

    std::cout << "Cells from the first probe:" << std::endl;
    for (int i = 0; i < cells1.size(); i++)
        cout << cells1[i] << endl;

    cout << endl;
    cout << endl;

    std::cout << "Cells from the second probe:" << std::endl;
    for (int i = 0; i < cells2.size(); i++)
        cout << cells2[i] << endl;
}

string EvenStringStart(string &start)
{
    string even_string = "";
    for (int i = 0; i < start.size(); i++)
    {
        if (i % 2 == 0)
            even_string += start[i];
        else
            even_string += 'X';
    }
    return even_string;
}

string OddStringStart(string& start)
{
    string even_string = "";
    for (int i = 0; i < start.size(); i++)
    {
        if (i % 2 == 1)
            even_string += start[i];
        else
            even_string += 'X';
    }
    return even_string;
}

/*
vector<int> UsedCells1Start(vector<string> &cells1)
{
    vector<int> used_cells1;
    used_cells1.resize(cells1.size());
    for (int i = 0; i < cells1.size(); i++)
        used_cells1[i] = 0;
    return used_cells1;
}

vector<int> UsedCells2Start(vector<string> &cells2)
{
    vector<int> used_cells2;
    used_cells2.resize(cells2.size());
    for (int i = 0; i < cells2.size(); i++)
        used_cells2[i] = 0;
    return used_cells2;
}
*/

bool EvenValidation(string &even_string, string& odd_string, vector<string> &cells2, vector<int> &used_cells2)
{
    for (int i = 0; i < cells2.size(); i++)
    {
        if (even_string[even_string.size() - 1] == cells2[i][cells2[i].size() - 1] and used_cells2[i] == 0)
        {
            used_cells2[i] = 1;
            return true;
        }
    }
    return false;
}

int main() 
{
    string key;
    int length = 0;
    string start;
    string pattern1, pattern2;
    vector<string> cells1;
    vector<string> cells2;

    ReadFromXML(cells1, cells2, key, length, start, pattern1, pattern2);

    //vector<int> used_cells1 = UsedCells1Start(cells1);
    //vector<int> used_cells2 = UsedCells2Start(cells2);
    vector<int> used_cells1;
    vector<int> used_cells2;

    string even_string = EvenStringStart(start);
    string odd_string = OddStringStart(start);

    //DisplayXMLData(cells1, cells2, key, length, start, pattern1, pattern2);

    cout << "start:       " << start << endl;
    cout << "even_string: " << even_string << endl;
    cout << "odd_string:  " << odd_string << endl;





    //cout << "even_string.size(): " << even_string.size() << endl;
    cout << "cells1[0].size(): " << cells1[0].size() << endl;
    cout << "cells2[0].size(): " << cells2[0].size() << endl;

    cout << "cells1[0]: " << cells1[0] << endl;
    cout << "cells2[0]: " << cells2[0] << endl;

    //cout << "Validation: " << Validation(cells1[0], cells2, used_cells2) << endl;
    //cout << "Validation: " << Validation(cells1[0], cells2, used_cells2) << endl;
    //cout << "Validation: " << Validation(cells1[0], cells2, used_cells2) << endl;

    //cout << "used_cells1.size(): " << used_cells1.size() << endl;
    //cout << "used_cells2.size(): " << used_cells2.size() << endl;

    return 0;
}
